name: Deploy

on:
  workflow_call:
    inputs:
      os:
        description: "The OS the workflow should use"
        required: false
        type: string
        default: ubuntu-latest
      retention_days:
        description: "Artifact retention days"
        required: false
        type: number
        default: 7
      draft:
        description: "Whether to create a draft release"
        required: false
        type: boolean
        default: false
      prerelease_suffix:
        description: "Pattern to identify pre-releases (default: -RC)"
        required: false
        type: string
        default: '-RC'
      verify_release:
        description: "Whether to verify the release after creation"
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  deploy:
    name: "Release"
    runs-on: ${{ inputs.os }}
    steps:
      # Download the release artifacts uploaded in the previous workflow
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        id: download
        continue-on-error: false
        with:
          name: Release
          run-id: ${{ github.event.workflow_run.id }}
          path: "${{ github.workspace }}/tmp/"

      # Verify artifacts were downloaded successfully
      - name: Verify Artifacts
        shell: bash
        run: |
          # Check if the tmp directory exists and has files
          if [ ! -d "${{ github.workspace }}/tmp/" ] || [ -z "$(ls -A ${{ github.workspace }}/tmp/)" ]; then
            echo "::error::No artifacts found in download directory"
            exit 1
          fi
          
          # List all downloaded artifacts for logging
          echo "Downloaded artifacts:"
          ls -la ${{ github.workspace }}/tmp/
          
          # Count the number of artifacts
          ARTIFACT_COUNT=$(ls -1 ${{ github.workspace }}/tmp/ | wc -l)
          echo "artifact_count=$ARTIFACT_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$ARTIFACT_COUNT" -eq 0 ]; then
            echo "::error::No artifacts found after download"
            exit 1
          fi
          
          echo "Found $ARTIFACT_COUNT artifacts"

      # Generate changelog
      - name: Generate Changelog
        uses: ardalanamini/auto-changelog@v4
        id: changelog
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          commit-types: |
            feat: New Features
            fix: Bug Fixes
            build: Build System & Dependencies
            perf: Performance Improvements
            docs: Documentation
            test: Tests
            refactor: Refactors
            chore: Chores
            ci: CI
            style: Code Style
            revert: Reverts
          default-commit-type: Other Changes
          release-name: ${{ github.ref_name }}
          mention-authors: true
          mention-new-contributors: true
          include-compare-link: true
          include-pr-links: true
          include-commit-links: true
          semver: true
          use-github-autolink: true

      # Create release
      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create-release
        with:
          files: |
            ${{ github.workspace }}/tmp/*
          fail_on_unmatched_files: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          draft: ${{ inputs.draft }}
          prerelease: ${{ contains(github.ref_name, inputs.prerelease_suffix) }}
          generate_release_notes: false
          body: ${{ steps.changelog.outputs.changelog }}

      # Verify the release was created successfully
      - name: Verify Release
        if: ${{ inputs.verify_release }}
        shell: bash
        run: |
          # Extract release ID from the previous step
          RELEASE_ID="${{ steps.create-release.outputs.id }}"
          if [ -z "$RELEASE_ID" ]; then
            echo "::error::Failed to get release ID"
            exit 1
          fi
          
          echo "Verifying release with ID: $RELEASE_ID"
          
          # Check if the release exists
          if ! gh release view ${{ github.ref_name }} &> /dev/null; then
            echo "::error::Release ${{ github.ref_name }} not found"
            exit 1
          fi
          
          # Check if the release contains the expected number of assets
          EXPECTED_ASSETS=$(ls -1 ${{ github.workspace }}/tmp/ | wc -l)
          ACTUAL_ASSETS=$(gh release view ${{ github.ref_name }} --json assets --jq '.assets | length')
          
          if [ "$ACTUAL_ASSETS" -ne "$EXPECTED_ASSETS" ]; then
            echo "::error::Release has $ACTUAL_ASSETS assets, expected $EXPECTED_ASSETS"
            exit 1
          fi
          
          echo "Release verification successful: ${{ github.ref_name }} contains $ACTUAL_ASSETS assets"
          
          # Output a link to the release
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          REPO_OWNER="${GITHUB_REPOSITORY%/*}"
          echo "Release URL: https://github.com/$REPO_OWNER/$REPO_NAME/releases/tag/${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}